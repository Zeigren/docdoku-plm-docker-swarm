#!/usr/bin/env bash

# DocDoku, Professional Open Source
# Copyright 2006 - 2017 DocDoku SARL
#
# This file is part of DocDokuPLM.
#
# DocDokuPLM is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DocDokuPLM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with DocDokuPLM.  If not, see <http://www.gnu.org/licenses/>.
#

EPLMP_SSH_URL=git@github.com:polarsys/eplmp.git
EPLMP_HTTPS_URL=https://github.com/polarsys/eplmp.git
DOCDOKU_PLM_SSH_URL=git@github.com:docdoku/docdoku-plm.git
DOCDOKU_PLM_HTTPS_URL=https://github.com/docdoku/docdoku-plm.git
DOCDOKU_WEB_FRONT_SSH_URL=git@github.com:docdoku/docdoku-web-front.git
DOCDOKU_WEB_FRONT_HTTPS_URL=https://github.com/docdoku/docdoku-web-front.git

dir () {
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}

SCRIPT_DIR="$(dir)"
cd ${SCRIPT_DIR}
ARGS=$@

init-repo () {

    echo "Preparing volumes ..."

    mkdir -p ${SCRIPT_DIR}/volumes
    mkdir -p ${SCRIPT_DIR}/volumes/{db,vault,plugins,native-libs,m2,npm,autodeploy,elasticsearch-data}

    PROTOCOL="$1";

    if [ -z "$PROTOCOL" ]
      then
        echo "No protocol supplied, using https"
        PROTOCOL=https
    fi

    if [ "$PROTOCOL" == "ssh" ] || [  "$PROTOCOL" == "https" ] ; then
        echo "Cloning ${PROTOCOL} repositories ..."
    else
        echo "Sorry protocol $PROTOCOL is not available"
        usage
        exit -1
    fi

    if [ "$PROTOCOL" == "ssh" ]  ; then
        git clone --single-branch -b develop ${EPLMP_SSH_URL} ${SCRIPT_DIR}/volumes/src/eplmp
        git clone --single-branch -b dev ${DOCDOKU_PLM_SSH_URL} ${SCRIPT_DIR}/volumes/src/docdoku-plm
        git clone --single-branch -b dev ${DOCDOKU_WEB_FRONT_SSH_URL} ${SCRIPT_DIR}/volumes/src/docdoku-web-front
    else
        git clone --single-branch -b develop ${EPLMP_HTTPS_URL} ${SCRIPT_DIR}/volumes/src/eplmp
        git clone --single-branch -b dev ${DOCDOKU_PLM_HTTPS_URL} ${SCRIPT_DIR}/volumes/src/docdoku-plm
        git clone --single-branch -b dev ${DOCDOKU_WEB_FRONT_HTTPS_URL} ${SCRIPT_DIR}/volumes/src/docdoku-web-front
    fi


}

down() {
    echo "Stopping current containers ..."
    docker-compose down
}

up () {
    echo "Running the platform ..."
    docker-compose up -d
}

build-images (){
    # Build the base payara image with dependencies
    echo "Building base image ..."
    docker build -t docdokuplm:payara ${SCRIPT_DIR}/back/payara

    echo "Building platform components..."
    docker-compose build
}

build-artifacts (){
    echo "Building artifacts ..."
    docker-compose run build-env bash -c "cd /src/docdoku-web-front && npm run build --unsafe-perm --quiet"
    docker-compose run build-env bash -c "cd /src/docdoku-plm/docdoku-api && npm install --unsafe-perm --quiet"
    docker-compose run build-env bash -c "mvn clean install -f /src/eplmp/pom.xml"
    docker-compose run build-env bash -c "mvn clean install -f /src/docdoku-plm/pom.xml"
}

deploy () {

    echo "Deploying artifacts ..."

    # Back
    rm -rf ${SCRIPT_DIR}/volumes/autodeploy/*
    cp ${SCRIPT_DIR}/volumes/src/eplmp/eplmp-server/eplmp-server-ear/target/eplmp-server-ear.ear ${SCRIPT_DIR}/volumes/autodeploy/

    # Plugins
    # Add converters, importers ... here
    #

    # Front
    rm -rf ${SCRIPT_DIR}/volumes/web-front/*
    cp -R ${SCRIPT_DIR}/volumes/src/docdoku-web-front/dist/* ${SCRIPT_DIR}/volumes/web-front/
    echo "Done"
}

logs (){
    docker-compose logs -f
}

health (){
    curl localhost:10080/eplmp-server-rest/api/platform/health
}

status () {
    docker-compose images
}

run() {

    cmd="$*"
    if [ -z "$cmd" ]
      then
        echo "No command supplied"
        usage
        exit -1
    fi
    echo "Running $cmd ..."
    docker-compose run build-env bash -c "$cmd"
}

usage () {

    GREEN='\033[0;32m'
    NC='\033[0m'
    echo -e "${GREEN}DocDokuPLM${NC} platform-ctl"
    echo -e "Version 0.0.1 \n"
    echo -e "   Usage: ${GREEN} platform-ctl <command> [arguments]${NC} "
    echo -e ""
    echo -e "Available commands:"
    echo -e ""
    echo -e "  ${GREEN}init-repo [<ssh|https>]${NC}: Init the repositories to ./volumes/src/"
    echo -e "  ${GREEN}build-images${NC}:            Build the base docker image from docker-compose file"
    echo -e "  ${GREEN}build-artifacts${NC}:         Build the main artifacts (eplmp-server-ear, converters, ...)"
    echo -e "  ${GREEN}deploy${NC}:                  Copy the main artifacts to the autodeploy volume"
    echo -e "  ${GREEN}up${NC}:                      Start the containers"
    echo -e "  ${GREEN}down${NC}:                    Stop the containers"
    echo -e "  ${GREEN}logs${NC}:                    Read the logs from all containers"
    echo -e "  ${GREEN}health${NC}:                  Run a health-check (webservice)"
    echo -e "  ${GREEN}status${NC}:                  Get a status of running images"
    echo -e "  ${GREEN}run \"command\"${NC}:           Run a custom command in build env"
    echo -e "  ${GREEN}help${NC}:                    Display this lines"

    echo -e "";
}

case "$1" in
'init-repo')
   init-repo $2
    ;;
'build-images')
   build-images
    ;;
'build-artifacts')
    build-artifacts
    ;;
'deploy')
   deploy
    ;;
'up')
    down && \
    up
    ;;
'down')
    down
    ;;
'logs')
    logs
    ;;
'health')
    health
    ;;
'status')
    status
    ;;
'help')
    usage
    ;;
'run')
    run $2
    ;;
*)
    usage
    ;;
esac

